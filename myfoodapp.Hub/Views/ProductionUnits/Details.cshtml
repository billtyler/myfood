@model IEnumerable<myfoodapp.Hub.Models.ProductionUnit>

@{
	ViewBag.Title = "Details";
	Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/series-label.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>

<link rel="stylesheet" href="~/Content/jquery.fancybox.min.css" />

<script src="~/Scripts/jquery.fancybox.min.js"></script>

<script type="text/javascript">

    var dialog = $("#dialog");

    (function (H) {
        H.seriesTypes.line.prototype.requireSorting = false;
    })(Highcharts);


	$(document).ready(function () {
		viewInfo();
	})
    function PHMeasureChart(productId, ProductRange) {
        $.ajax({
            url: "@Url.Action("PHMeasure_Read", "ProductionUnits")",
            dataType: "json",
            data: { id: productId, range: ProductRange },
            type: "POST",
            success: function (response) {
                response.forEach(function (item, i, response) {
                    var date = new Date(response[i][0].toString());
                    response[i][0] = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
                });

                Highcharts.chart('ph-chart', {
                    chart: {
                        type: 'spline',
                        backgroundColor: 'transparent',
                    },
                    //legend: {
                    //    enabled: false
                    //},
                    title: {
                        text: ''
                    },
                    subtitle: {
                        text: ''
                    },
                    xAxis: {
                        type: 'datetime',
                        dateTimeLabelFormats: {
                            month: '%e. %b'
                        },
                        title: {
                            text: ''
                        },
                        minorGridLineWidth: 1,
                        gridLineWidth: 0,
                        alternateGridColor: null,
                    },
                    yAxis: {
                        min: 4,
                        max: 10,
                        title: {
                            text: ''
                        },
                        minorGridLineWidth: 1,
                        gridLineWidth: 1,
                        alternateGridColor: null,

                    },
                    tooltip: {
                        headerFormat: '<b>{series.name}</b><br>',
                        pointFormat: '{point.x:%e %b %H:%M} value:<b>{point.y:.2f}</b>'
                    },
                    plotOptions: {
                        spline: {
                            marker: {
                                enabled: false
							},
							lineWidth: 4,
							color: '#2EA636',
                        }
                    },
                    series: [{
                        name: 'pH',
                        data: response,
                        label: {
                            enabled: false,
                        }
                    }],
                    navigation: {
                        menuItemStyle: {
                            fontSize: '10px'
                        }
                    }
                });
                $('.highcharts-contextbutton').remove();
                $('.highcharts-credits').remove();
                $('.highcharts-label').remove();
            }
        });
    }

    function WaterTempMeasureChart(productId, ProductRange) {
        $.ajax({
            url: "@Url.Action("WaterTempMeasure_Read", "ProductionUnits")",
            dataType: "json",
            data: { id: productId, range: ProductRange },
            type: "POST",
            success: function (response) {
                response.forEach(function (item, i, response) {
                    var date = new Date(response[i][0].toString());
                    response[i][0] = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
                });

                Highcharts.chart('watertemp-chart', {
                    chart: {
                        type: 'spline',
                        backgroundColor: 'transparent',
                    },
                    //legend: {
                    //    enabled: false
                    //},
                    title: {
                        text: ''
                    },
                    subtitle: {
                        text: ''
                    },
                    xAxis: {
                        type: 'datetime',
                        dateTimeLabelFormats: {
                            month: '%e. %b'
                        },
                        title: {
                            text: ''
                        },
                        minorGridLineWidth: 1,
                        gridLineWidth: 0,
                        alternateGridColor: null,
                    },
                    yAxis: {
                        title: {
                            text: ''
                        },
                        minorGridLineWidth: 1,
                        gridLineWidth: 1,
                        alternateGridColor: null,

                    },
                    tooltip: {
                        headerFormat: '<b>{series.name}</b><br>',
                        pointFormat: '{point.x:%e %b %H:%M} value:<b>{point.y:.2f}</b>'
                    },
                    plotOptions: {
                        spline: {
                            marker: {
                                enabled: false
							},
							lineWidth: 4,
							color: '#2EA636',
						},
                    },
                    series: [{
                        name: 'Water Temp',
                        data: response,
                        label: {
                            enabled: false,
						},
                    }],
                    navigation: {
                        menuItemStyle: {
                            fontSize: '10px'
                        }
                    }
                });
                $('.highcharts-contextbutton').remove();
                $('.highcharts-credits').remove();
            }
        });
    }
    function AirTempMeasureChart(productId, ProductRange) {
        $.ajax({
            url: "@Url.Action("TempMeasure_Read", "ProductionUnits")",
            dataType: "json",
            data: { id: productId, range: ProductRange },
            type: "POST",
            success: function (response) {
                response.air.forEach(function (item, i, response) {
                    var date = new Date(response[i][0].toString());
                    response[i][0] = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
                });
                response.externalAir.forEach(function (item, i, response) {
                    var date = new Date(response[i][0].toString());
                    response[i][0] = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
                });
                Highcharts.chart('airtemp-chart', {
                    chart: {
                        type: 'spline',
                        backgroundColor: 'transparent',
                    },
                    title: {
                        text: ''
                    },
                    subtitle: {
                        text: ''
                    },
                    xAxis: {
                        type: 'datetime',
                        dateTimeLabelFormats: {
                            month: '%e. %b'
                        },
                        title: {
                            text: ''
                        },
                        minorGridLineWidth: 1,
                        gridLineWidth: 0,
                        alternateGridColor: null,
                    },
                    yAxis: {
                        title: {
                            text: ''
                        },
                        minorGridLineWidth: 1,
                        gridLineWidth: 1,
                        alternateGridColor: null,

                    },
                    tooltip: {
                        headerFormat: '<b>{series.name}</b><br>',
                        pointFormat: '{point.x:%e %b %H:%M} value:<b>{point.y:.2f}</b>'
                    },
                    plotOptions: {
                        spline: {
                            marker: {
                                enabled: false
							},
							lineWidth: 4,
                        }
                    },
                    series: [
                        {
                            name: 'Air Temp',
                            data: response.air,
							color: '#2EA636',
                            label: {
                                enabled: false,
                            },
                        },

                        {
                            name: 'External Air Temp',
                            data: response.externalAir,
							color: '#E54848',
                            label: {
                                enabled: false,
                            }
                        }
                    ],
                    navigation: {
                        menuItemStyle: {
                            fontSize: '10px'
                        }
                    }
                });
                $('.highcharts-contextbutton').remove();
                $('.highcharts-credits').remove();
            },
            error: function(response)
            {
                console.log('hmm');
            }
        });
    }
    function HumidityMeasureChart(productId, ProductRange) {
        $.ajax({
            url: "@Url.Action("HumidityMeasure_Read", "ProductionUnits")",
            dataType: "json",
            data: { id: productId, range: ProductRange },
            type: "POST",
            success: function (response) {
                response.humidity.forEach(function (item, i, response) {
                    var date = new Date(response[i][0].toString());
                    response[i][0] = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
                });
                response.externalHumidity.forEach(function (item, i, response) {
                    var date = new Date(response[i][0].toString());
                    response[i][0] = Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
                });

                Highcharts.chart('humidity-chart', {
                    chart: {
                        type: 'spline',
                        backgroundColor: 'transparent',
                    },
                    title: {
                        text: ''
                    },
                    subtitle: {
                        text: ''
                    },
                    xAxis: {
                        type: 'datetime',
                        dateTimeLabelFormats: {
                            month: '%e. %b'
                        },
                        title: {
                            text: ''
                        },
                        minorGridLineWidth: 1,
                        gridLineWidth: 0,
                        alternateGridColor: null,
                    },
                    yAxis: {
                        title: {
                            text: ''
                        },
                        minorGridLineWidth: 1,
                        gridLineWidth: 1,
                        alternateGridColor: null,

                    },
                    tooltip: {
                        headerFormat: '<b>{series.name}</b><br>',
                        pointFormat: '{point.x:%e %b %H:%M} value:<b>{point.y:.2f}</b>'
                    },
                    plotOptions: {
                        spline: {
                            marker: {
                                enabled: false
							},
							lineWidth: 4,
                        }
                    },
                    series: [{
                        name: 'Humidity',
                        data: response.humidity,
						color: '#2EA636',
                        label: {
                            enabled: false,
                        }
                    },
                        {
                            name: 'External Humidity',
                            data: response.externalHumidity,
							color: '#E54848',
                            label: {
                                enabled: false,
                            }
                        }],
                    navigation: {
                        menuItemStyle: {
                            fontSize: '10px'
                        }
                    }
                });
                $('.highcharts-contextbutton').remove();
                $('.highcharts-credits').remove();
            }
        });
    }


    function viewInfo() {

        var productionUnitId = $('#routeDataId').val();
        $.ajax({
            url: "@Url.Action("GetProductionUnitDetailPopUp", "ProductionUnits")",
            dataType: "json",
            data: { id: productionUnitId },
            type: "POST",
			success: function (item) {

				$(".image-container .img-responsive").attr("src", "/Content/Pictures/Sites/" + item.PicturePath);
				$(".company-logo .img-responsive").attr("src", "/Content/Pictures/ProductType/" + item.ProductionUnitTypeImage);
				$(".company-name").text(item.ProductionUnitTypeName);
				$(".contacts .title").text(item.PioneerCitizenName + ' #' + item.PioneerCitizenNumber);
				$(".Average-Monthly-Production").text(item.AverageMonthlyProduction);
				$(".Average-Monthly-Spared-CO2").text(item.AverageMonthlySparedCO2);
				$(".Online-Since-Weeks").text(item.OnlineSinceWeeks);
				$(".phone").text(item.PhoneNumber);
				$(".mail").text(item.ContactMail);
				$(".phone").attr("href", "tel:" + item.PhoneNumber.replace(" ", ""));
				$(".mail").attr("href", "mailto:" + item.ContactMail);
				console.log(item.Location)
				if (item.Location != "") {
					$(".location").text(item.Location);
					$("li.loc").show();
				}
				else 
					$("li.loc").remove()

				if (item.PreferedMoment != "") {
					$(".best-to-contact").text(item.PreferedMoment);
					$("li.btc").show();
				}
				else
					$("li.btc").remove()
					
				
            }
        });
    }

    window.onload = function onLoad(e) {

        var productionUnitId = $('#routeDataId').val();

        PHMeasureChart(productionUnitId, null);
        console.log(true);
        WaterTempMeasureChart(productionUnitId, null);
        console.log(true);
        AirTempMeasureChart(productionUnitId, null);
        console.log(true);
        HumidityMeasureChart(productionUnitId, null);
        console.log(true);
        $.ajax({
            url: "@Url.Action("GetProductionUnitDetail", "ProductionUnits")",
            dataType: "json",
            data: {id: productionUnitId},
            type: "POST",
            success: function (response) {
                $("#PioneerCitizenName").text(response.PioneerCitizenName + " #" + response.PioneerCitizenNumber);
                $("#ProductionUnitType").text(response.ProductionUnitType);
                $("#ProductionUnitVersion").text('VERSION: ' + response.ProductionUnitVersion);
                $("#ProductionUnitOptions").text('Options: ' + response.ProductionUnitOptions);
                $("#OnlineSinceWeeks").text(response.OnlineSinceWeeks);
                $("#AverageMonthlyProduction").text(response.AverageMonthlyProduction + 'kg');
                $("#AverageMonthlySparedCO2").text(response.AverageMonthlySparedCO2 + 'kg');

                if (response.PicturePath === null)
                {
                    $("#ProductionUnitPicture").hide();
                }
                else
                {
                    $('#ProductionUnitPicture').css("background-image", "linear-gradient(rgba(0, 0, 0, .1), rgba(0, 0, 0, .5)), url(/Content/Pictures/Sites/" + response.PicturePath + ")");
                    $("#ProductionUnitPicture").show();
                }

                $("#CurrentPhValue").text(response.CurrentPhValue);
                $("#CurrentPhCaptureTime").text(response.CurrentPhCaptureTime);
                $("#AverageHourPhValue").text(response.AverageHourPhValue);
                $("#AverageDayPhValue").text(response.AverageDayPhValue);
                $("#LastDayPhCaptureTime").text(response.LastDayPhCaptureTime);

                $("#CurrentWaterTempValue").text(response.CurrentWaterTempValue);
                $("#CurrentWaterTempCaptureTime").text(response.CurrentWaterTempCaptureTime);
                $("#AverageHourWaterTempValue").text(response.AverageHourWaterTempValue);
                $("#AverageDayWaterTempValue").text(response.AverageDayWaterTempValue);
                $("#LastDayWaterTempCaptureTime").text(response.LastDayWaterTempCaptureTime);

                $("#CurrentAirTempValue").text(response.CurrentAirTempValue);
                $("#CurrentAirTempCaptureTime").text(response.CurrentAirTempCaptureTime);
                $("#AverageHourAirTempValue").text(response.AverageHourAirTempValue);
                $("#AverageDayAirTempValue").text(response.AverageDayAirTempValue);
                $("#LastDayAirTempCaptureTime").text(response.LastDayAirTempCaptureTime);

                $("#CurrentHumidityValue").text(response.CurrentHumidityValue);
                $("#CurrentHumidityCaptureTime").text(response.CurrentHumidityCaptureTime);
                $("#AverageHourHumidityValue").text(response.AverageHourHumidityValue);
                $("#AverageDayHumidityValue").text(response.AverageDayHumidityValue);
                $("#LastDayHumidityCaptureTime").text(response.LastDayHumidityCaptureTime);
            }
        });

        var myVal = $("#displayManagementBtn").val();
        if (myVal === 'None')
        {
            $("#managementButton").hide();
        }
    }

    function onAddEventClick() {
        $('#dialog').data("kendoDialog").open();
    }

    function onViewEventsClick() {
        var productionUnitId = $('#routeDataId').val();
        window.location = window.location.origin + "/Events/Index/" + productionUnitId;
    }

    function onManageUnitClick() {
        var productionUnitId = $('#routeDataId').val();
        window.location = window.location.origin + "/ProductionUnits/Update/" + productionUnitId;
    }

    function onThisWeekClick(sel) {

		var productionUnitId = $('#routeDataId').val();

		if (sel.options[sel.selectedIndex].text == "This Last Day") {
			PHMeasureChart(productionUnitId, "thisLastDays");
			WaterTempMeasureChart(productionUnitId, "thisLastDays");
			AirTempMeasureChart(productionUnitId, "thisLastDays");
			HumidityMeasureChart(productionUnitId, "thisLastDays");
		}


		if (sel.options[sel.selectedIndex].text == "Last Week") {
			PHMeasureChart(productionUnitId, "thisWeek");
			WaterTempMeasureChart(productionUnitId, "thisWeek");
			AirTempMeasureChart(productionUnitId, "thisWeek");
			HumidityMeasureChart(productionUnitId, "thisWeek");
		}


		if (sel.options[sel.selectedIndex].text == "Last Three Months") {
			PHMeasureChart(productionUnitId, "lastThreeMonths");
			WaterTempMeasureChart(productionUnitId, "lastThreeMonths");
			AirTempMeasureChart(productionUnitId, "lastThreeMonths");
			HumidityMeasureChart(productionUnitId, "lastThreeMonths");
		}

    }

    function onExportCSVClick() {
        var productionUnitId = $('#routeDataId').val();
        window.location.href = "@Url.Action("DownloadCSV", "ProductionUnits")?id=" + productionUnitId;
    }

    function onEventTypeChange(arg) {
        var currentEventypeIndex = $('#listViewEventType').data("kendoListView").select().index();
        var currentEventypeId = $('#listViewEventType').data("kendoListView").dataSource.view()[currentEventypeIndex].Id;

        var listViewEventTypeItems = $('#listViewEventTypeItems').data("kendoListView");
        listViewEventTypeItems.dataSource.read({ evenTypeId: currentEventypeId });
    }

    function onEventTypeItemChange(arg) {
        $('#descriptionTextBox').css("visibility", "visible");
        $('#datePicker').css("visibility", "visible");
    }

    function onInitOpen(e) {

    }

    function onOpen(e) {

    }

    function onShow(e) {

    }

    function onHide(e) {

    }

    function onClose(e) {

    }

    function onCancel(e) {

    }

    function onOK(e) {

        var currentProductionUnitId = $('#routeDataId').val();

        var currentEventypeIndex = $('#listViewEventType').data("kendoListView").select().index();
        if (currentEventypeIndex == -1)
            return;

        var currentEventypeId = $('#listViewEventType').data("kendoListView").dataSource.view()[currentEventypeIndex].Id;

        var currentEventTypeItemIndex = $('#listViewEventTypeItems').data("kendoListView").select().index();
        var currentEventTypeItemId = 0;

        if (currentEventTypeItemIndex == -1)
        {
            currentEventTypeItemId = 0;
        }
        else
        {
            currentEventTypeItemId = $('#listViewEventTypeItems').data("kendoListView").dataSource.view()[currentEventTypeItemIndex].Id;
        }

        var strNote = $('#descriptionTextBox').val();

        var date = $('#datePicker').data("kendoDatePicker").value().toISOString();

        var strDetails = $('#detailsTextArea').val();

        $.ajax({
            url: "@Url.Action("AddEvent", "ProductionUnits")",
            dataType: "json",
            data: { productionUnitId: currentProductionUnitId, eventTypeId: currentEventypeId, eventTypeItemId: currentEventTypeItemId, note: strNote, currentDate: date, details: strDetails, },
        type: "POST",
        success: function (response) {
            $('#descriptionTextBox').val('');
            $('#detailsTextArea').val('');

            $('#listViewEventTypeItems').data("kendoListView").clearSelection();
        }
    });

    }



</script>

<script type="text/x-kendo-tmpl" id="templateOption">
	<div class="option">
		<span>&bull; #:name#</span>
	</div>
</script>

<input type="hidden" value='@ViewContext.RouteData.Values["id"]' id="routeDataId" />
<input type="hidden" id="displayManagementBtn" value="@ViewBag.DisplayManagementBtn" />

<div id="main-section-header" class="row">
	<h2 id="title" class="col-lg-7">[[[Production Unit Details]]]</h2>
	<div id="title-buttons" class="col-lg-5">




		<select onchange="onThisWeekClick(this)" class="change-graph">
			<option>This Last Day</option>
			<option>Last Week</option>
			<option>Last Three Months</option>
		</select>
			<button class="fill" data-toggle="modal" data-target="#performanceModal">View Info</button>
		


		</div>
	<div style="clear:both;"></div>
</div>

<div id="productionUnits-grid" class="main-section-content row">
	<div id="measures-container" class="col-md-12">
		<div id="dialog">
			@(Html.Kendo().Dialog()
										.Name("dialog")
										.Title("[[[Add Event]]]")
										.Width(720)
										.Height(780)
										.Animation(c => c.Open(a => a.Fade(FadeDirection.In).Zoom(ZoomDirection.In)).Close(a => a.Fade(FadeDirection.Out).Zoom(ZoomDirection.Out)))
										.Modal(true)
										.Visible(false)
										.Closable(true)
										.Content(" " +

							Html.Kendo().TabStrip()
							.Name("tabstrip")
							.HtmlAttributes(new { style = "border-width:0px; height:500px;" })
							.Animation(animation =>
								animation.Open(effect =>
									effect.Fade(FadeDirection.In)))
							.Items(tabstrip =>
							{
								tabstrip.Add().Text("Basic Info")
									.ContentHtmlAttributes(new { style = "height:560px;" })
									.Selected(true)
									.Content(
							"<p>[[[Log your Actions / Events here]]]<p>" +

										"<div id='listViewEventTypeDiv'>" +

											Html.Kendo().ListView<myfoodapp.Hub.Models.EventTypeViewModel>()
										.Name("listViewEventType")
										.TagName("div")
										.ClientTemplateId("template")
										.DataSource(dataSource =>
										{
											dataSource.Read(read => read.Action("EventType_Read", "ProductionUnits"));
										})
										.Selectable(selectable => selectable.Mode(ListViewSelectionMode.Single))
										.Events(events => events.Change("onEventTypeChange"))

										+ "</div>"

										+ " <div id='listViewEventTypeItemsDiv'>" +

										Html.Kendo().ListView<myfoodapp.Hub.Models.EventTypeViewModel>()
										.Name("listViewEventTypeItems")
										.TagName("div")
										.ClientTemplateId("template")
										.DataSource(dataSource =>
										{
											dataSource.Read(read => read.Action("EventTypeItem_Read", "ProductionUnits"));
										})
										.Selectable(selectable => selectable.Mode(ListViewSelectionMode.Single))
										.Events(events => events.Change("onEventTypeItemChange"))

										+ "</div>"

										+ " <div id='noteDateDiv'>" +

										Html.Kendo().TextBox()
										.Name("descriptionTextBox")
										.HtmlAttributes(new { placeholder = "Note", required = "required", style = "width:100%; height:40px;" })

										+

										Html.Kendo().DatePicker()
										.Name("datePicker")
										.Value(DateTime.Today)
										.HtmlAttributes(new { style = "width: 100%;", title = "datepicker" })

										+ "</div>"

								);

								tabstrip.Add().Text("Detailed")
									.ContentHtmlAttributes(new { style = "height:560px;" })
									.Content(
								"<p>[[[Detailed event description]]]<p>" +

								" <div id='detailsDiv'>" +
											Html.TextArea("detailsTextArea", "", new { @class = "k-textbox", style = "width: 100%; height: 500px" })

								+ "</div>"
								);

							})

										)
										.Actions(actions =>
										{
											actions.Add()
											.Text("Cancel")
											.Action("onCancel");
											actions.Add().Text("OK")
											.Primary(true)
											.Action("onOK");
										})
										.Events(ev => ev
										.InitOpen("onInitOpen")
										.Open("onOpen")
										.Show("onShow")
										.Close("onClose")
										.Hide("onHide")
										)
			)
		</div>
	</div>







	<div id="statsContainerTop" class="row">
		<div id="pHContainer" class="col-md-6">
			<div class="wrapper">
				<h3 class="graph-header">[[[pH]]]</h3>
				<div class="sparkline-container">
					<div>
						<div class="column-left">
							<h2>[[[CURRENT]]]</h2>
							<span id="CurrentPhValue">-</span>
							<h2 id="CurrentPhCaptureTime">-</h2>
						</div>
						<div class="column-center">
							<h2>[[[AVERAGE]]]</h2>
							<span id="AverageHourPhValue">-</span>
							<h2>[[[PAST HOUR]]]</h2>
						</div>
						<div class="column-right">
							<h2>[[[AVERAGE]]]</h2>
							<span id="AverageDayPhValue">-</span>
							<h2 id="LastDayPhCaptureTime">-</h2>
						</div>
					</div>
				</div>

				<div id="ph-chart"></div>
			</div>
		</div>



		<div id="WaterTempContainer" class="col-md-6">
			<div class="wrapper">
				<h3 class="graph-header">[[[Water Temperature (°C)]]]</h3>
				<div class="sparkline-container">
					<div>
						<div class="column-left">
							<h2>[[[CURRENT]]]</h2>
							<span id="CurrentWaterTempValue">-</span>
							<h2 id="CurrentWaterTempCaptureTime">-</h2>
						</div>
						<div class="column-center">
							<h2>[[[AVERAGE]]]</h2>
							<span id="AverageHourWaterTempValue">-</span>
							<h2>[[[PAST HOUR]]]</h2>
						</div>
						<div class="column-right">
							<h2> [[[AVERAGE]]]</h2>
							<span id="AverageDayWaterTempValue">-</span>
							<h2 id="LastDayWaterTempCaptureTime">-</h2>
						</div>
					</div>
				</div>

				<div id="watertemp-chart"></div>
				
			</div>
		</div>



		<div id="AirTempContainer" class="col-md-6">

			<div class="wrapper">
				<h3 class="graph-header">[[[Air Temperature (°C)]]]</h3>
				<div class="sparkline-container">
					<div>
						<div class="column-left">
							<h2>[[[CURRENT]]]</h2>
							<span id="CurrentAirTempValue">-</span>
							<h2 id="CurrentAirTempCaptureTime">-</h2>
						</div>
						<div class="column-center">
							<h2>[[[AVERAGE]]]</h2>
							<span id="AverageHourAirTempValue">-</span>
							<h2>[[[PAST HOUR]]]</h2>
						</div>
						<div class="column-right">
							<h2>[[[AVERAGE]]]</h2>
							<span id="AverageDayAirTempValue">-</span>
							<h2 id="LastDayAirTempCaptureTime">-</h2>
						</div>
					</div>
				</div>

				<div id="airtemp-chart"></div>
			</div>
		</div>




		<div id="HumidityContainer" class="col-md-6">
			<div class="wrapper">
				<h3 class="graph-header">[[[Humidity (%)]]]</h3>
				<div class="sparkline-container">
					<div>
						<div class="column-left">
							<h2>[[[CURRENT]]]</h2>
							<span id="CurrentHumidityValue">-</span>
							<h2 id="CurrentHumidityCaptureTime">-</h2>
						</div>
						<div class="column-center">
							<h2>[[[AVERAGE]]]</h2>
							<span id="AverageHourHumidityValue">-</span>
							<h2>PAST HOUR</h2>
						</div>
						<div class="column-right">
							<h2>[[[AVERAGE]]]</h2>
							<span id="AverageDayHumidityValue">-</span>
							<h2 id="LastDayHumidityCaptureTime">-</h2>
						</div>
					</div>
				</div>

				<div id="humidity-chart"></div>
			</div>
		</div>

		<div class="col-md-9 buttons-section">
			<button class="btn btn-transparent" onclick="onAddEventClick()">[[[Add Event]]]</button>
			<button class="btn btn-transparent" onclick="onViewEventsClick()">[[[View Events]]]</button>
			<button class="btn btn-transparent" onclick="onManageUnitClick()">[[[Manage Unit]]]</button>
			<button class="btn btn-green-sm" onclick="onExportCSVClick()">[[[Export CSV]]]</button>


		</div>
	<div class="col-md-3 buttons-section a-right">
				<button class="btn btn-green" onclick="onExportCSVClick()">[[[Export CSV]]]</button>
	</div>

</div>

<!-- Modal -->
<div class="modal fade" id="performanceModal" tabindex="-1" role="dialog" aria-labelledby="performanceModalLabel">
	<div class="modal-dialog" role="document">
		<div class="modal-content">
			<div class="modal-header">
				<div class="image-container">
					<img src="images/large-image.jpg" alt="" class="img-responsive">
				</div>
			</div>
			<div class="modal-body">
				<div class="row">
					<div class="col-sm-6">
						<div class="company-name">
							Dolor sit amet
						</div>
						<div class="company-logo">
							<img src="images/logo.png" alt="" class="img-responsive">
						</div>
					</div>
					<div class="col-sm-6">
						<div class="contacts">
							<div class="title">
							</div>
							<ul>
								<li>[[[Email:]]] <a class="mail"></a></li>
								<li>[[[Phone:]]] <a class="phone" ></a></li>
								<li class="btc">[[[Best to contact:]]] <span class="best-to-contact"></span></li>
								<li class="loc">[[[Location:]]] <span class="location"></span></li>
							</ul>
						</div>
					</div>
				</div>
				<div class="performance-box">
					<div class="title">
						[[[PERFORMANCE]]]
					</div>
					<div class="stats">
						<div class="row">
							<div class="col-xs-4">
								<div>[[[EST. PROD.]]]</div>
								<span class="Average-Monthly-Production"></span>
								<div>[[[PER MONTH]]]</div>
							</div>
							<div class="col-xs-4">
								<div>[[[CO2 SAVED]]]</div>
								<span class="Average-Monthly-Spared-CO2"></span>
								<div>[[[PER MONTH]]]</div>
							</div>
							<div class="col-xs-4">
								<div>[[[ONLINE SINCE]]]</div>
								<span class="Online-Since-Weeks"></span>
								<div>[[[WEEKS]]]</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-link" data-dismiss="modal">[[[CLOSE]]]</button>
			</div>
		</div>
	</div>
</div>


<script type="text/x-kendo-tmpl" id="template">
	<div class="eventType">
		<h2>#:name#</h2>
		<h3 style="visibility:hidden">#:Id#</h3>
	</div>
</script>

<style>
	.eventType {
		float: left;
		width: 120px;
		height: 60px;
		margin-top: 10px;
		margin-bottom: 10px;
		padding: 5px;
		cursor: pointer;
	}

	#listViewEventTypeDiv {
		margin-top: 20px;
		margin-bottom: 10px;
	}

	#listViewEventTypeItemsDiv {
		margin-top: 200px;
		margin-bottom: 10px;
	}

	#pHContainer, #WaterTempContainer, #AirTempContainer, #HumidityContainer{
		padding:0;
	}
	.sparkline-container {
		padding-bottom: 30px;
		margin-bottom: 15px;
		background: url('/Content/images/footer-dots.png') repeat-x;
		background-position: bottom;
	}
	.a-right {
		text-align: right;
	}
	.graph-header {
		text-align: center;
		font-size: 1.4rem;
		padding: 25px;
		font-family: Roboto-Thin;
	}
	.k-window.k-dialog {
		position: absolute;
	}

	.wrapper{
		background-color: white;
		border-radius: 17px 17px;
		margin: 15px;
	}
	#main-section {
		font-family: Roboto-Regular;
	}


	#ph-chart, #watertemp-chart, #airtemp-chart, #humidity-chart {
		height: 400px;
	}

	.change-graph {
		border: 2px solid #D5EDD6;
		padding: 0.63em;
		border-radius: 15px;
		color: #2EA636;
		font-size: 14px;
	}

	.btn-green {
		margin: 0.5em;
		padding: .55em 1em;
	}

	.k-loading-mask {
		opacity: 0;
	}


	.column-left {
		color: #707070;
		float: left;
		width: 33%;
		text-align: center;
		font-size: 14px;
	}
	.buttons-section{
		margin-top: 10px;
	}
	.column-right {
		color: #707070;
		float: right;
		width: 33%;
		text-align: center;
		font-size: 14px;
	}

	.column-center {
		color: #707070;
		display: inline-block;
		width: 33%;
		text-align: center;
		font-size: 14px;
	}
	.wrapper span {
		font-weight: bold;
		color: #2EA636;
		font-size: 27px;
		line-height: 38px;
	}

	.column-left span:first-of-type {
		color: #E54848;
	}

	#productionUnits-grid {
		padding: 15px;
	}

	.btn-green-sm {
		display: none;
	}

	.btn-transparent:hover,
	.btn-transparent:focus,
	.fill:hover,
	.fill:focus {
		outline: none;
		border-radius: 20px 20px;
		box-shadow: inset 0 0 0 2em #2EA636;
	}

	.btn-transparent,
	.fill {
		position: relative;
		min-width: 130px;
		font-size: 14px;
		color: #2EA636;
		transition: .5s;
	}

		.btn-transparent:hover,
		.btn-transparent:focus,
		.fill:hover, .fill:focus {
			border-color: #2EA636;
			color: #fff;
		}

	.btn-transparent,
	.fill {
		border-radius: 20px 20px;
		background: none;
		border: 2px solid #2EA636;
		font: inherit;
		font-size: 14px;
		color: #707070;
		line-height: 1;
		margin: 0.5em;
		padding: .8em 1em;
	}

		.fill::after {
			content: "";
			position: absolute;
			display: block;
			left: 50%;
			top: 50%;
			width: 90px;
			height: 90px;
			margin: -45px;
			-webkit-border-radius: 50%;
			border-radius: 50%;
			background-image: url(/Content/images/dots_anim.svg);
			-webkit-animation: infinite-rotate 15s infinite linear;
			animation: infinite-rotate 15s infinite linear;
		}

	@@-webkit-keyframes infinite-rotate {
		from {
			-webkit-transform: rotate(0deg);
		}

		to {
			-webkit-transform: rotate(359deg);
		}
	}


	@@media (max-width: 1200px){
		#main-section-header h2 {
			text-align: center;
			padding-left: 0px !important;
		}

	}
	@@media (max-width: 991px){
		#title{
			line-height: 20px;
		}
		#title-buttons{

		}
	}

	@@media (max-width: 797px) {
		.btn-transparent {
			width: 46%;
		}
		.btn-green-sm{
			display: inline-block;
			width: 45%;
		}
		.btn-green{
			display: none;
		}
	}

	@@media (max-width: 500px)
	{
		#ph-chart, #watertemp-chart, #airtemp-chart, #humidity-chart {
			height: 300px;
		}
		.buttons-section {
			padding-left: 0;
		}
		.btn-transparent{
			width: 100%;
		}
		.btn-green-sm {
			width: 100%;
			margin: 0.5em;
		}
	}
	@@media (max-width: 768px){
		#title {
			line-height: 20px !important;
		}
	}





</style>



<script type="text/javascript">
	function error_handler(e) {
		if (e.errors) {
			var measure = "Errors:\n";
			$.each(e.errors, function (key, value) {
				if ('errors' in value) {
					$.each(value.errors, function () {
						measure += this + "\n";
					});
				}
			});
			alert(measure);
		}
	}
</script>

